(() => {
  const newMap = {
    HINK: 'NEWC',
    LEIC: 'ROBE',
    WBAY: 'MITC',
    DAWS: 'CAPR',
    HERB: 'HINK',
    FAIR: 'FAIR',
    CAPR: 'FLYN',
    LONG: 'WBAY',
    FISH: 'LONG',
    BONN: 'FISH',
    FLYN: 'BLAI',
    DICK: 'DICK',
    PETR: 'PETR',
    BRIS: 'LILL',
    LILL: 'BONN',
    KENN: 'KENN',
    WRIG: 'GROO',
    RANK: 'MORE',
    MORE: 'RYAN',
    GRIF: 'BRIS',
    FADD: 'GRIF',
    BOWM: 'BOWM',
    MARA: 'MARA',
    GROO: 'WRIG',
    BLAI: 'OXLE',
    OXLE: 'RANK',
    RYAN: 'FORD',
    FORD: 'FADD',
    MONC: 'MONC',
    MCPH: 'MCPH',
    PARK: 'NENG',
    COWP: 'HUNT',
    LYNE: 'PATE',
    LIND: 'DOBE',
    MACQ: 'SHOR',
    DOBE: 'LYNE',
    SHOR: 'COWP',
    HUNT: 'PAGE',
    PATE: 'RICH',
    CALA: 'PARK',
    PAGE: 'CALA',
    RICH: 'MACQ',
    MCMA: 'CHIF',
    BENN: 'BERO',
    MITC: 'BENN',
    BRFD: 'BRFD',
    NEWC: 'MACK',
    RIVE: 'FARR',
    NENG: 'LIND',
    EMON: 'MCMA',
    WHIT: 'GREE',
    MACA: 'FOWL',
    CHIF: 'PARR',
    FOWL: 'BLAX',
    GREE: 'WATS',
    REID: 'REID',
    WARR: 'WARR',
    FARR: 'RIVE',
    GILM: 'MACA',
    CUNN: 'WERR',
    WERR: 'BANK',
    COOK: 'BART',
    PARR: 'GRAY',
    BLAX: 'SYDN',
    GRAY: 'WENT',
    HUGH: 'HUGH',
    BANK: 'COOK',
    WATS: 'CUNN',
    SYDN: 'KSMI',
    BART: 'WHIT',
    WENT: 'GILM',
    KSMI: 'EMON',
    GORT: 'HAWK',
    CORI: 'WANN',
    LALO: 'BALL',
    FRAS: 'GORT',
    WILL: 'COOP',
    COOP: 'CHIS',
    WANN: 'CORA',
    HAWK: 'MARI',
    KOOY: 'WILL',
    CHIS: 'KOOY',
    HOTH: 'HOTH',
    BRUC: 'BRUC',
    CASE: 'CASE',
    BALL: 'CORI',
    MARI: 'FRAS',
    HIGG: 'MACK',
    SWAN: 'ADEL',
    BULL: 'CANN',
    CANN: 'MAYO',
    TANG: 'KING',
    BARK: 'SPEN',
    SPEN: 'BARK',
    HASL: 'MAKI',
    CURT: 'HIND',
    COWA: 'STUR',
    KING: 'BOOT'
  };

  export const electorates = config.groups
    .flatMap(group => group.hexes.map(hex => ({ ...hex, group: group.name })))
    .toSorted((a, b) => a.index - b.index);

  export const electoratesByCode = Object.values(electorates).reduce((obj, electorate) => {
    obj[electorate.id] = electorate;
    return obj;
  }, {});

  config.forEach(state =>
    state.hexes.forEach((hex, i) => {
      const newElectorate = newMap[hex.id];
      console.log('replace', hex.id, 'with', newElectorate);
    })
  );
})();
